//===========================================================================
//  ONLY CHANGE THE FOLLOWING IF YOU KNOW WHAT YOU ARE DOING
//===========================================================================
def props
def randomUUID = UUID.randomUUID().toString()
def randomPort = Math.abs(new Random().nextInt() % 50) + 3001

pipeline {
	agent {
    docker {
      image 'dkorber/java-node:1.0.0'
      args '-p ' + randomPort + ':' + randomPort + ' -v /var/run/docker.sock:/var/run/docker.sock --name jenkins-' + randomUUID
    }
  }
	environment {
    CRED_NEXUS = credentials('easywareNexusAdmin')
    CRED_SONAR = credentials('easywareSonarJenkins')
  }

	stages {

		stage("Prepare environment") {
			steps{
				script {
					echo "Reading application name and version from package.json file"
					props = readJSON file: './package.json' // https://plugins.jenkins.io/pipeline-utility-steps/

					echo "applicationName: ${props.name}"
					echo "applicationVersion: ${props.version}"
					sh "npm config set registry https://${props.jenkins.nexus.hostname}/repository/easyware-npm-group"
					sh "docker login -u ${CRED_NEXUS_USR} -p ${CRED_NEXUS_PSW} ${props.jenkins.nexus.hostname}:${props.jenkins.nexus.hostedPort}"
				}
			}
		}

		stage("Install packages") {
			steps{
				script {
					sh "npm install"
				}
			}
		}

		stage("Set sonar settings") {
			steps{
				script{
					sh "echo 'sonar.host.url=${props.jenkins.sonar.host}' >> ${props.jenkins.sonar.properties}"
					sh "echo 'sonar.login=${CRED_SONAR_USR}' >> ${props.jenkins.sonar.properties}"
					sh "echo 'sonar.password=${CRED_SONAR_PSW}' >> ${props.jenkins.sonar.properties}"
					sh "echo 'sonar.projectKey=${props.name}' >> ${props.jenkins.sonar.properties}"
					sh "echo 'sonar.projectName=${props.name}' >> ${props.jenkins.sonar.properties}"
				}
			}
		}

		stage("Lint") {
			steps{
				script {
					sh "npm run sonar"
				}
			}
		}

		stage("Build app") {
			steps{
				script {
					sh "npm run build"
				}
			}
		}

		stage("Build docker") {
			steps{
				script {
					sh "docker build -t ${props.jenkins.nexus.imageGroup}/${props.name} ./config"
					sh "docker tag ${props.jenkins.nexus.imageGroup}/${props.name} ${props.jenkins.nexus.hostname}:${props.jenkins.nexus.hostedPort}/${props.jenkins.nexus.imageGroup}/${props.name}:${props.version}"
					sh "docker tag ${props.jenkins.nexus.imageGroup}/${props.name} ${props.jenkins.nexus.hostname}:${props.jenkins.nexus.hostedPort}/${props.jenkins.nexus.imageGroup}/${props.name}:latest"
					sh "docker push ${props.jenkins.nexus.hostname}:${props.jenkins.nexus.hostedPort}/${props.jenkins.nexus.imageGroup}/${props.name}:${props.version}"
					sh "docker push ${props.jenkins.nexus.hostname}:${props.jenkins.nexus.hostedPort}/${props.jenkins.nexus.imageGroup}/${props.name}:latest"
				}
			}
		}

		stage("Prepare docker deployment") {
			steps{
				script{
					sh "touch ${props.jenkins.docker.labels}"
					sh "echo 'traefik.enable=true' >> ${props.jenkins.docker.labels}"
					for (int i = 0; i < props.jenkins.urls.size(); ++i) {
            sh "echo 'traefik.http.routers.${props.jenkins.urls[i].service}.entrypoints=websecure' >> ${props.jenkins.docker.labels}"
            sh "echo 'traefik.http.routers.${props.jenkins.urls[i].service}.rule=Host(`${props.jenkins.urls[i].host}.${props.jenkins.urls[i].domain}`)' >> ${props.jenkins.docker.labels}"
            sh "echo 'traefik.http.routers.${props.jenkins.urls[i].service}.tls.certresolver=${props.jenkins.traefik.resolver}' >> ${props.jenkins.docker.labels}"
          }
        }
			}
		}

		stage("Start docker") {
			steps{
				script {

          try {
              sh "docker stop ${props.name} || true && docker rm ${props.name} || true"
          } catch (Exception e) {
              echo 'Exception occurred: ' + e.toString()
          }

					sh """docker run -d \
						--network ${props.jenkins.docker.network} \
						--name ${props.name} \
            --env REST_API_URL=${props.jenkins.nginx.env.api} \
						--label-file ${props.jenkins.docker.labels} \
						${props.jenkins.nexus.imageGroup}/${props.name}"""
					sh "rm ${props.jenkins.docker.labels}"
				}
			}
		}

		// stage("Prune docker") {
		// 	steps{
		// 		script {
		// 			sh "docker system prune -f"
		// 		}
		// 	}
		// }

	}
}
